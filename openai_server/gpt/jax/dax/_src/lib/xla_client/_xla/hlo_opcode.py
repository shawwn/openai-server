from enum import Enum
from typing import NamedTuple, Union

kHloOpcodeIsVariadic = -1

class HloOpcodeEntry(NamedTuple):
  value: int
  enum_name: str
  opcode_name: str
  argc: int

class HloOpcodeEnumEntry(NamedTuple):
  name: str
  value: HloOpcodeEntry

class HloOpcode(Enum):
  kAbs: HloOpcodeEnumEntry = HloOpcodeEntry(1, "kAbs", "abs", 1)
  kAdd: HloOpcodeEnumEntry = HloOpcodeEntry(2, "kAdd", "add", 2)
  kAddDependency: HloOpcodeEnumEntry = HloOpcodeEntry(3, "kAddDependency", "add-dependency", 2)
  kAfterAll: HloOpcodeEnumEntry = HloOpcodeEntry(4, "kAfterAll", "after-all", kHloOpcodeIsVariadic)
  kAllGather: HloOpcodeEnumEntry = HloOpcodeEntry(5, "kAllGather", "all-gather", kHloOpcodeIsVariadic)
  kAllReduce: HloOpcodeEnumEntry = HloOpcodeEntry(6, "kAllReduce", "all-reduce", kHloOpcodeIsVariadic)
  kAllReduceStart: HloOpcodeEnumEntry = HloOpcodeEntry(7, "kAllReduceStart", "all-reduce-start", kHloOpcodeIsVariadic)
  kAllReduceDone: HloOpcodeEnumEntry = HloOpcodeEntry(8, "kAllReduceDone", "all-reduce-done", 1)
  kAllToAll: HloOpcodeEnumEntry = HloOpcodeEntry(9, "kAllToAll", "all-to-all", kHloOpcodeIsVariadic)
  kAtan2: HloOpcodeEnumEntry = HloOpcodeEntry(10, "kAtan2", "atan2", 2)
  kBatchNormGrad: HloOpcodeEnumEntry = HloOpcodeEntry(11, "kBatchNormGrad", "batch-norm-grad", 5)
  kBatchNormInference: HloOpcodeEnumEntry = HloOpcodeEntry(12, "kBatchNormInference", "batch-norm-inference", 5)
  kBatchNormTraining: HloOpcodeEnumEntry = HloOpcodeEntry(13, "kBatchNormTraining", "batch-norm-training", 3)
  kBitcast: HloOpcodeEnumEntry = HloOpcodeEntry(14, "kBitcast", "bitcast", 1)
  kBitcastConvert: HloOpcodeEnumEntry = HloOpcodeEntry(15, "kBitcastConvert", "bitcast-convert", 1)
  kBroadcast: HloOpcodeEnumEntry = HloOpcodeEntry(16, "kBroadcast", "broadcast", 1)
  kCall: HloOpcodeEnumEntry = HloOpcodeEntry(17, "kCall", "call", kHloOpcodeIsVariadic)
  kCeil: HloOpcodeEnumEntry = HloOpcodeEntry(18, "kCeil", "ceil", 1)
  kCholesky: HloOpcodeEnumEntry = HloOpcodeEntry(19, "kCholesky", "cholesky", 1)
  kClamp: HloOpcodeEnumEntry = HloOpcodeEntry(20, "kClamp", "clamp", 3)
  kCollectivePermute: HloOpcodeEnumEntry = HloOpcodeEntry(21, "kCollectivePermute", "collective-permute", kHloOpcodeIsVariadic)
  kCollectivePermuteStart: HloOpcodeEnumEntry = HloOpcodeEntry(22, "kCollectivePermuteStart", "collective-permute-start", kHloOpcodeIsVariadic)
  kCollectivePermuteDone: HloOpcodeEnumEntry = HloOpcodeEntry(23, "kCollectivePermuteDone", "collective-permute-done", 1)
  kClz: HloOpcodeEnumEntry = HloOpcodeEntry(24, "kClz", "count-leading-zeros", 1)
  kCompare: HloOpcodeEnumEntry = HloOpcodeEntry(25, "kCompare", "compare", 2)
  kComplex: HloOpcodeEnumEntry = HloOpcodeEntry(26, "kComplex", "complex", 2)
  kConcatenate: HloOpcodeEnumEntry = HloOpcodeEntry(27, "kConcatenate", "concatenate", kHloOpcodeIsVariadic)
  kConditional: HloOpcodeEnumEntry = HloOpcodeEntry(28, "kConditional", "conditional", kHloOpcodeIsVariadic)
  kConstant: HloOpcodeEnumEntry = HloOpcodeEntry(29, "kConstant", "constant", 0)
  kConvert: HloOpcodeEnumEntry = HloOpcodeEntry(30, "kConvert", "convert", 1)
  kConvolution: HloOpcodeEnumEntry = HloOpcodeEntry(31, "kConvolution", "convolution", 2)
  kCopy: HloOpcodeEnumEntry = HloOpcodeEntry(32, "kCopy", "copy", 1)
  kCopyDone: HloOpcodeEnumEntry = HloOpcodeEntry(33, "kCopyDone", "copy-done", 1)
  kCopyStart: HloOpcodeEnumEntry = HloOpcodeEntry(34, "kCopyStart", "copy-start", 1)
  kCos: HloOpcodeEnumEntry = HloOpcodeEntry(35, "kCos", "cosine", 1)
  kCustomCall: HloOpcodeEnumEntry = HloOpcodeEntry(36, "kCustomCall", "custom-call", kHloOpcodeIsVariadic)
  kDivide: HloOpcodeEnumEntry = HloOpcodeEntry(37, "kDivide", "divide", 2)
  kDomain: HloOpcodeEnumEntry = HloOpcodeEntry(38, "kDomain", "domain", 1)
  kDot: HloOpcodeEnumEntry = HloOpcodeEntry(39, "kDot", "dot", 2)
  kDynamicSlice: HloOpcodeEnumEntry = HloOpcodeEntry(40, "kDynamicSlice", "dynamic-slice", kHloOpcodeIsVariadic)
  kDynamicUpdateSlice: HloOpcodeEnumEntry = HloOpcodeEntry(41, "kDynamicUpdateSlice", "dynamic-update-slice", kHloOpcodeIsVariadic)
  kExp: HloOpcodeEnumEntry = HloOpcodeEntry(42, "kExp", "exponential", 1)
  kExpm1: HloOpcodeEnumEntry = HloOpcodeEntry(43, "kExpm1", "exponential-minus-one", 1)
  kFft: HloOpcodeEnumEntry = HloOpcodeEntry(44, "kFft", "fft", 1)
  kFloor: HloOpcodeEnumEntry = HloOpcodeEntry(45, "kFloor", "floor", 1)
  kFusion: HloOpcodeEnumEntry = HloOpcodeEntry(46, "kFusion", "fusion", kHloOpcodeIsVariadic)
  kGather: HloOpcodeEnumEntry = HloOpcodeEntry(47, "kGather", "gather", 2)
  kGetDimensionSize: HloOpcodeEnumEntry = HloOpcodeEntry(48, "kGetDimensionSize", "get-dimension-size", 1)
  kSetDimensionSize: HloOpcodeEnumEntry = HloOpcodeEntry(49, "kSetDimensionSize", "set-dimension-size", 2)
  kGetTupleElement: HloOpcodeEnumEntry = HloOpcodeEntry(50, "kGetTupleElement", "get-tuple-element", 1)
  kImag: HloOpcodeEnumEntry = HloOpcodeEntry(51, "kImag", "imag", 1)
  kInfeed: HloOpcodeEnumEntry = HloOpcodeEntry(52, "kInfeed", "infeed", 1)
  kIota: HloOpcodeEnumEntry = HloOpcodeEntry(53, "kIota", "iota", 0)
  kIsFinite: HloOpcodeEnumEntry = HloOpcodeEntry(54, "kIsFinite", "is-finite", 1)
  kLog: HloOpcodeEnumEntry = HloOpcodeEntry(55, "kLog", "log", 1)
  kLog1p: HloOpcodeEnumEntry = HloOpcodeEntry(56, "kLog1p", "log-plus-one", 1)
  kLogistic: HloOpcodeEnumEntry = HloOpcodeEntry(57, "kLogistic", "logistic", 1)
  kAnd: HloOpcodeEnumEntry = HloOpcodeEntry(58, "kAnd", "and", 2)
  kNot: HloOpcodeEnumEntry = HloOpcodeEntry(59, "kNot", "not", 1)
  kOr: HloOpcodeEnumEntry = HloOpcodeEntry(60, "kOr", "or", 2)
  kXor: HloOpcodeEnumEntry = HloOpcodeEntry(61, "kXor", "xor", 2)
  kMap: HloOpcodeEnumEntry = HloOpcodeEntry(62, "kMap", "map", kHloOpcodeIsVariadic)
  kMaximum: HloOpcodeEnumEntry = HloOpcodeEntry(63, "kMaximum", "maximum", 2)
  kMinimum: HloOpcodeEnumEntry = HloOpcodeEntry(64, "kMinimum", "minimum", 2)
  kMultiply: HloOpcodeEnumEntry = HloOpcodeEntry(65, "kMultiply", "multiply", 2)
  kNegate: HloOpcodeEnumEntry = HloOpcodeEntry(66, "kNegate", "negate", 1)
  kOutfeed: HloOpcodeEnumEntry = HloOpcodeEntry(67, "kOutfeed", "outfeed", 2)
  kPad: HloOpcodeEnumEntry = HloOpcodeEntry(68, "kPad", "pad", 2)
  kParameter: HloOpcodeEnumEntry = HloOpcodeEntry(69, "kParameter", "parameter", 0)
  kPartitionId: HloOpcodeEnumEntry = HloOpcodeEntry(70, "kPartitionId", "partition-id", 0)
  kPopulationCount: HloOpcodeEnumEntry = HloOpcodeEntry(71, "kPopulationCount", "popcnt", 1)
  kPower: HloOpcodeEnumEntry = HloOpcodeEntry(72, "kPower", "power", 2)
  kReal: HloOpcodeEnumEntry = HloOpcodeEntry(73, "kReal", "real", 1)
  kRecv: HloOpcodeEnumEntry = HloOpcodeEntry(74, "kRecv", "recv", 1)
  kRecvDone: HloOpcodeEnumEntry = HloOpcodeEntry(75, "kRecvDone", "recv-done", 1)
  kReduce: HloOpcodeEnumEntry = HloOpcodeEntry(76, "kReduce", "reduce", kHloOpcodeIsVariadic)
  kReducePrecision: HloOpcodeEnumEntry = HloOpcodeEntry(77, "kReducePrecision", "reduce-precision", 1)
  kReduceScatter: HloOpcodeEnumEntry = HloOpcodeEntry(78, "kReduceScatter", "reduce-scatter", kHloOpcodeIsVariadic)
  kReduceWindow: HloOpcodeEnumEntry = HloOpcodeEntry(79, "kReduceWindow", "reduce-window", kHloOpcodeIsVariadic)
  kRemainder: HloOpcodeEnumEntry = HloOpcodeEntry(80, "kRemainder", "remainder", 2)
  kReplicaId: HloOpcodeEnumEntry = HloOpcodeEntry(81, "kReplicaId", "replica-id", 0)
  kReshape: HloOpcodeEnumEntry = HloOpcodeEntry(82, "kReshape", "reshape", 1)
  kDynamicReshape: HloOpcodeEnumEntry = HloOpcodeEntry(83, "kDynamicReshape", "dynamic-reshape", kHloOpcodeIsVariadic)
  kReverse: HloOpcodeEnumEntry = HloOpcodeEntry(84, "kReverse", "reverse", 1)
  kRng: HloOpcodeEnumEntry = HloOpcodeEntry(85, "kRng", "rng", kHloOpcodeIsVariadic)
  kRngGetAndUpdateState: HloOpcodeEnumEntry = HloOpcodeEntry(86, "kRngGetAndUpdateState", "rng-get-and-update-state", 0)
  kRngBitGenerator: HloOpcodeEnumEntry = HloOpcodeEntry(87, "kRngBitGenerator", "rng-bit-generator", 1)
  kRoundNearestAfz: HloOpcodeEnumEntry = HloOpcodeEntry(88, "kRoundNearestAfz", "round-nearest-afz", 1)
  kRsqrt: HloOpcodeEnumEntry = HloOpcodeEntry(89, "kRsqrt", "rsqrt", 1)
  kScatter: HloOpcodeEnumEntry = HloOpcodeEntry(90, "kScatter", "scatter", 3)
  kSelect: HloOpcodeEnumEntry = HloOpcodeEntry(91, "kSelect", "select", 3)
  kSelectAndScatter: HloOpcodeEnumEntry = HloOpcodeEntry(92, "kSelectAndScatter", "select-and-scatter", 3)
  kSend: HloOpcodeEnumEntry = HloOpcodeEntry(93, "kSend", "send", 2)
  kSendDone: HloOpcodeEnumEntry = HloOpcodeEntry(94, "kSendDone", "send-done", 1)
  kShiftLeft: HloOpcodeEnumEntry = HloOpcodeEntry(95, "kShiftLeft", "shift-left", 2)
  kShiftRightArithmetic: HloOpcodeEnumEntry = HloOpcodeEntry(96, "kShiftRightArithmetic", "shift-right-arithmetic", 2)
  kShiftRightLogical: HloOpcodeEnumEntry = HloOpcodeEntry(97, "kShiftRightLogical", "shift-right-logical", 2)
  kSign: HloOpcodeEnumEntry = HloOpcodeEntry(98, "kSign", "sign", 1)
  kSin: HloOpcodeEnumEntry = HloOpcodeEntry(99, "kSin", "sine", 1)
  kSlice: HloOpcodeEnumEntry = HloOpcodeEntry(100, "kSlice", "slice", 1)
  kSort: HloOpcodeEnumEntry = HloOpcodeEntry(101, "kSort", "sort", kHloOpcodeIsVariadic)
  kSqrt: HloOpcodeEnumEntry = HloOpcodeEntry(102, "kSqrt", "sqrt", 1)
  kCbrt: HloOpcodeEnumEntry = HloOpcodeEntry(103, "kCbrt", "cbrt", 1)
  kSubtract: HloOpcodeEnumEntry = HloOpcodeEntry(104, "kSubtract", "subtract", 2)
  kTanh: HloOpcodeEnumEntry = HloOpcodeEntry(105, "kTanh", "tanh", 1)
  kTrace: HloOpcodeEnumEntry = HloOpcodeEntry(106, "kTrace", "trace", 1)
  kTranspose: HloOpcodeEnumEntry = HloOpcodeEntry(107, "kTranspose", "transpose", 1)
  kTriangularSolve: HloOpcodeEnumEntry = HloOpcodeEntry(108, "kTriangularSolve", "triangular-solve", 2)
  kTuple: HloOpcodeEnumEntry = HloOpcodeEntry(109, "kTuple", "tuple", kHloOpcodeIsVariadic)
  kTupleSelect: HloOpcodeEnumEntry = HloOpcodeEntry(110, "kTupleSelect", "tuple-select", 3)
  kWhile: HloOpcodeEnumEntry = HloOpcodeEntry(111, "kWhile", "while", 1)

HloOpcodeType = Union[HloOpcode, HloOpcodeEnumEntry, HloOpcodeEntry, str, int]

def HloOpcodeFor(opcode) -> HloOpcodeEntry:
  """Returns a string representation of the opcode."""
  if hasattr(opcode, 'name'):
    opcode = opcode.name
  elif hasattr(opcode, 'value'):
    opcode = opcode.value
  if hasattr(opcode, 'value'):
    opcode = opcode.value
  for entry in HloOpcode.__members__.values():
    info: HloOpcodeEntry = entry.value
    if info.value == opcode or info.enum_name == opcode or info.opcode_name == opcode:
      return info
  raise ValueError(f"Unknown opcode: {opcode!r}")

def HloOpcodeString(opcode: HloOpcode) -> str:
  """Returns a string representation of the opcode."""
  return HloOpcodeFor(opcode).opcode_name

def StringToHloOpcode(opcode_name: str) -> HloOpcode:
  """Retrieves the opcode enum by name if the opcode exists."""
  return getattr(HloOpcode, HloOpcodeFor(opcode_name).enum_name)

def HloOpcodeIsComparison(opcode: HloOpcode) -> bool:
  return HloOpcodeFor(opcode).value == HloOpcode.kCompare.value

def HloOpcodeIsVariadic(opcode: HloOpcode) -> bool:
  return HloOpcodeArity(opcode) == kHloOpcodeIsVariadic

def HloOpcodeArity(opcode: HloOpcode) -> int:
  return HloOpcodeFor(opcode).argc

# def HLO_OPCODE_LIST(V):
#   V("kAbs", "abs", 1)
#   V("kAdd", "add", 2)
#   V("kAddDependency", "add-dependency", 2)
#   V("kAfterAll", "after-all", kHloOpcodeIsVariadic)
#   V("kAllGather", "all-gather", kHloOpcodeIsVariadic)
#   V("kAllReduce", "all-reduce", kHloOpcodeIsVariadic)
#   V("kAllReduceStart", "all-reduce-start", kHloOpcodeIsVariadic)
#   V("kAllReduceDone", "all-reduce-done", 1)
#   V("kAllToAll", "all-to-all", kHloOpcodeIsVariadic)
#   V("kAtan2", "atan2", 2)
#   V("kBatchNormGrad", "batch-norm-grad", 5)
#   V("kBatchNormInference", "batch-norm-inference", 5)
#   V("kBatchNormTraining", "batch-norm-training", 3)
#   V("kBitcast", "bitcast", 1)
#   V("kBitcastConvert", "bitcast-convert", 1)
#   V("kBroadcast", "broadcast", 1)
#   V("kCall", "call", kHloOpcodeIsVariadic)
#   V("kCeil", "ceil", 1)
#   V("kCholesky", "cholesky", 1)
#   V("kClamp", "clamp", 3)
#   V("kCollectivePermute", "collective-permute", kHloOpcodeIsVariadic)
#   V("kCollectivePermuteStart", "collective-permute-start", kHloOpcodeIsVariadic)
#   V("kCollectivePermuteDone", "collective-permute-done", 1)
#   V("kClz", "count-leading-zeros", 1)
#   V("kCompare", "compare", 2)
#   V("kComplex", "complex", 2)
#   V("kConcatenate", "concatenate", kHloOpcodeIsVariadic)
#   V("kConditional", "conditional", kHloOpcodeIsVariadic)
#   V("kConstant", "constant", 0)
#   V("kConvert", "convert", 1)
#   V("kConvolution", "convolution", 2)
#   V("kCopy", "copy", 1)
#   V("kCopyDone", "copy-done", 1)
#   V("kCopyStart", "copy-start", 1)
#   V("kCos", "cosine", 1)
#   V("kCustomCall", "custom-call", kHloOpcodeIsVariadic)
#   V("kDivide", "divide", 2)
#   V("kDomain", "domain", 1)
#   V("kDot", "dot", 2)
#   V("kDynamicSlice", "dynamic-slice", kHloOpcodeIsVariadic)
#   V("kDynamicUpdateSlice", "dynamic-update-slice", kHloOpcodeIsVariadic)
#   V("kExp", "exponential", 1)
#   V("kExpm1", "exponential-minus-one", 1)
#   V("kFft", "fft", 1)
#   V("kFloor", "floor", 1)
#   V("kFusion", "fusion", kHloOpcodeIsVariadic)
#   V("kGather", "gather", 2)
#   V("kGetDimensionSize", "get-dimension-size", 1)
#   V("kSetDimensionSize", "set-dimension-size", 2)
#   V("kGetTupleElement", "get-tuple-element", 1)
#   V("kImag", "imag", 1)
#   V("kInfeed", "infeed", 1)
#   V("kIota", "iota", 0)
#   V("kIsFinite", "is-finite", 1)
#   V("kLog", "log", 1)
#   V("kLog1p", "log-plus-one", 1)
#   V("kLogistic", "logistic", 1)
#   V("kAnd", "and", 2)
#   V("kNot", "not", 1)
#   V("kOr", "or", 2)
#   V("kXor", "xor", 2)
#   V("kMap", "map", kHloOpcodeIsVariadic)
#   V("kMaximum", "maximum", 2)
#   V("kMinimum", "minimum", 2)
#   V("kMultiply", "multiply", 2)
#   V("kNegate", "negate", 1)
#   V("kOutfeed", "outfeed", 2)
#   V("kPad", "pad", 2)
#   V("kParameter", "parameter", 0)
#   V("kPartitionId", "partition-id", 0)
#   V("kPopulationCount", "popcnt", 1)
#   V("kPower", "power", 2)
#   V("kReal", "real", 1)
#   V("kRecv", "recv", 1)
#   V("kRecvDone", "recv-done", 1)
#   V("kReduce", "reduce", kHloOpcodeIsVariadic)
#   V("kReducePrecision", "reduce-precision", 1)
#   V("kReduceScatter", "reduce-scatter", kHloOpcodeIsVariadic)
#   V("kReduceWindow", "reduce-window", kHloOpcodeIsVariadic)
#   V("kRemainder", "remainder", 2)
#   V("kReplicaId", "replica-id", 0)
#   V("kReshape", "reshape", 1)
#   V("kDynamicReshape", "dynamic-reshape", kHloOpcodeIsVariadic)
#   V("kReverse", "reverse", 1)
#   V("kRng", "rng", kHloOpcodeIsVariadic)
#   V("kRngGetAndUpdateState", "rng-get-and-update-state", 0)
#   V("kRngBitGenerator", "rng-bit-generator", 1)
#   V("kRoundNearestAfz", "round-nearest-afz", 1)
#   V("kRsqrt", "rsqrt", 1)
#   V("kScatter", "scatter", 3)
#   V("kSelect", "select", 3)
#   V("kSelectAndScatter", "select-and-scatter", 3)
#   V("kSend", "send", 2)
#   V("kSendDone", "send-done", 1)
#   V("kShiftLeft", "shift-left", 2)
#   V("kShiftRightArithmetic", "shift-right-arithmetic", 2)
#   V("kShiftRightLogical", "shift-right-logical", 2)
#   V("kSign", "sign", 1)
#   V("kSin", "sine", 1)
#   V("kSlice", "slice", 1)
#   V("kSort", "sort", kHloOpcodeIsVariadic)
#   V("kSqrt", "sqrt", 1)
#   V("kCbrt", "cbrt", 1)
#   V("kSubtract", "subtract", 2)
#   V("kTanh", "tanh", 1)
#   V("kTrace", "trace", 1)
#   V("kTranspose", "transpose", 1)
#   V("kTriangularSolve", "triangular-solve", 2)
#   V("kTuple", "tuple", kHloOpcodeIsVariadic)
#   V("kTupleSelect", "tuple-select", 3)
#   V("kWhile", "while", 1)
